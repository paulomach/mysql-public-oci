application: MySQL
main: true
repo: mysql
description: >
  MySQL is a fast, stable and true multi-user, multi-threaded SQL database
  server. SQL (Structured Query Language) is the most popular database query
  language in the world. The main goals of MySQL are speed, robustness and ease
  of use. Read more on the [MySQL website](https://dev.mysql.com/doc/refman/8.0/en/).
version: 8.0.25
base: Ubuntu 21.10
architectures:
  - amd64
  - arm64
  - s390x
docker:
  parameters:
    - -p 30306:3306
    - -e MYSQL_ROOT_PASSWORD=My:S3cr3t/
  access: Access your MySQL server at `localhost:30306`.
parameters:
  - type: -e
    value: TZ=UTC
    description: Timezone.
  - type: -e
    value: MYSQL_ROOT_PASSWORD=secret_for_root
    description: Set the password for the `root` user. This option is **mandatory** and **must not be empty**.
  - type: -e
    value: MYSQL_PASSWORD=secret
    description: Set the password for the `MYSQL_USER` user.
  - type: -e
    value: MYSQL_USER=john
    description: Create a new user with superuser privileges. This is used in conjunction with `MYSQL_PASSWORD`.
  - type: -e
    value: MYSQL_DATABASE=db_test
    description: Set the name of the default database.
  - type: -e
    value: MYSQL_ALLOW_EMPTY_PASSWORD=yes
    description: Set up a blank password for the `root` user. **This is not recommended to be used in production, make sure you know what you are doing**.
  - type: -e
    value: MYSQL_RANDOM_ROOT_PASSWORD=yes
    description: Generate a random initial password for the `root` user using `pwgen`. It will be printed in the logs, search for `GENERATED ROOT PASSWORD`.
  - type: -e
    value: MYSQL_ONETIME_PASSWORD=yes
    description: Set `root` user as experide once initialization is complete, forcing a password change on first login.
  - type: -e
    value: MYSQL_INITSB_SKIP_TZINFO=yes
    description: Timezone data is automatically loaded via entrypoint script, set this variable to any non-empty value to disable it.
  - type: -p
    value: 30306:3306
    description: Expose MySQL server on `localhost:30306`.
  - type: -v
    value: /path/to/data:/var/lib/mysql
    description: Persist data instead of initializing a new database every time you launch a new container.
  - type: -v
    value: /path/to/config/files/:/etc/mysql/mysql.conf.d/
    description: Local [configuration files](https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html) (try this [example my.cnf](https://git.launchpad.net/~canonical-server/ubuntu-docker-images/+git/mysql/plain/examples/config/my.cnf)).
debug:
  extraparagraph: |
    #### Initialization Scripts

    One can also add initialization scripts to their containers. This includes `*.sql`, `.sql.gz`, and `*.sh` scripts, and you just need to put them inside the  `/docker-entrypoint-initdb.d` directory inside the container. After MySQL initialization is done and the default database and user are created, the scripts are executed in the following order:

    * Run any `*.sql` files in alphabetically order. By default the target database is specified via `MYSQL_DATABASE`.
    * Run any executable `*.sh` scripts in alphabetically order.
    * Source any non-executable `*.sh` scripts in alphabetically order.

    All of this is done before the MySQL service is started. Keep in mind if your database directory is not empty (contains pre-existing database) they will be left untouched.
  network:
    client: mysql
    args: -hmysql-container -uroot -p
    helper: The password will be asked and you can enter `My:S3cr3t/`. Now, you are logged in and can enjoy your new instance.
microk8s:
  configmap:
    files:
      - key: main-config
        name: my-custom.cnf
        link: https://git.launchpad.net/~canonical-server/ubuntu-docker-images/+git/mysql/plain/examples/config/my-custom.cnf
  deploy:
    link: https://git.launchpad.net/~canonical-server/ubuntu-docker-images/+git/mysql/plain/examples/mysql-deployment.yml
    access: You will now be able to connect to the MySQL server on `localhost:30306`.
